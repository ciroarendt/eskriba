version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: scriby_db
      POSTGRES_USER: scriby_user
      POSTGRES_PASSWORD: scriby_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - scriby-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U scriby_user -d scriby_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - scriby-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ../scriby-backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://scriby_user:scriby_pass@postgres:5432/scriby_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - KEYCLOAK_URL=http://keycloak:8080
    volumes:
      - ../scriby-backend:/app
      - media_files:/app/media
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - scriby-network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn scriby_backend.wsgi:application --bind 0.0.0.0:8000"

  # Celery Worker
  celery-worker:
    build:
      context: ../scriby-backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://scriby_user:scriby_pass@postgres:5432/scriby_db
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ../scriby-backend:/app
      - media_files:/app/media
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - scriby-network
    command: celery -A scriby_backend worker -l info

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ../scriby-backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://scriby_user:scriby_pass@postgres:5432/scriby_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../scriby-backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - scriby-network
    command: celery -A scriby_backend beat -l info

  # Next.js Dashboard
  dashboard:
    build:
      context: ../scriby-dashboard
      dockerfile: Dockerfile
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000/api
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=http://localhost:3000
    volumes:
      - ../scriby-dashboard:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - scriby-network
    command: npm run dev

  # Keycloak (Authentication)
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin123
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/scriby_db
      - KC_DB_USERNAME=scriby_user
      - KC_DB_PASSWORD=scriby_pass
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - scriby-network
    command: start-dev

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - dashboard
    networks:
      - scriby-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - scriby-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - scriby-network

volumes:
  postgres_data:
  redis_data:
  media_files:
  prometheus_data:
  grafana_data:

networks:
  scriby-network:
    driver: bridge
