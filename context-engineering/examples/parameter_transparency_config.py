"""
Exemplo: Configura√ß√£o Transparente de Par√¢metros ML

Este exemplo demonstra como implementar transpar√™ncia total de par√¢metros
conforme especificado em CLAUDE.md, permitindo que usu√°rios vejam e ajustem
todos os par√¢metros dos algoritmos com explica√ß√µes em tempo real.

Autor: Sistema de ML para An√°lise de Estoque
Data: 2024-07-18
Baseado em: context-engineering/CLAUDE.md
"""

import streamlit as st
from typing import Dict, Any, Tuple

class ParameterTransparencyConfig:
    """
    Classe para configura√ß√£o transparente de par√¢metros ML
    
    Implementa os padr√µes definidos em CLAUDE.md:
    - Transpar√™ncia obrigat√≥ria de par√¢metros
    - Explica√ß√µes contextuais para cada par√¢metro
    - Feedback visual do impacto dos ajustes
    """
    
    def __init__(self):
        self.algorithm_configs = self._load_default_configs()
        
    def _load_default_configs(self) -> Dict[str, Dict]:
        """
        Carrega configura√ß√µes padr√£o para todos algoritmos
        conforme especificado em CLAUDE.md
        """
        return {
            'dbscan': {
                'eps': {
                    'default': 0.3,
                    'range': (0.1, 1.0),
                    'step': 0.05,
                    'explanation': "Dist√¢ncia m√°xima entre produtos para serem considerados similares",
                    'impact': {
                        'low': "EPS baixo (<0.3) = grupos mais r√≠gidos, mais outliers detectados",
                        'medium': "EPS m√©dio (0.3-0.5) = equil√≠brio entre grupos e outliers",
                        'high': "EPS alto (>0.5) = grupos mais tolerantes, menos outliers"
                    }
                },
                'min_samples': {
                    'default': 5,
                    'range': (3, 15),
                    'step': 1,
                    'explanation': "N√∫mero m√≠nimo de produtos necess√°rios para formar um grupo",
                    'impact': {
                        'low': "Min_samples baixo (3-5) = mais grupos pequenos formados",
                        'medium': "Min_samples m√©dio (6-10) = grupos de tamanho moderado",
                        'high': "Min_samples alto (>10) = apenas grupos muito densos"
                    }
                }
            },
            'kmeans': {
                'n_clusters': {
                    'default': 'auto',
                    'range': (2, 8),
                    'step': 1,
                    'explanation': "N√∫mero de categorias finais para gest√£o de neg√≥cio",
                    'impact': {
                        'auto': "Autom√°tico = baseado nos insights do DBSCAN",
                        'manual': "Manual = voc√™ define quantas categorias quer"
                    }
                },
                'init': {
                    'default': 'k-means++',
                    'options': ['k-means++', 'random'],
                    'explanation': "Estrat√©gia de inicializa√ß√£o dos centroides",
                    'impact': {
                        'k-means++': "k-means++ = inicializa√ß√£o inteligente (recomendado)",
                        'random': "Random = inicializa√ß√£o aleat√≥ria (menos est√°vel)"
                    }
                },
                'max_iter': {
                    'default': 300,
                    'range': (100, 1000),
                    'step': 50,
                    'explanation': "N√∫mero m√°ximo de itera√ß√µes do algoritmo",
                    'impact': {
                        'low': "Max_iter baixo (<200) = converg√™ncia mais r√°pida, menos precis√£o",
                        'medium': "Max_iter m√©dio (200-500) = bom equil√≠brio",
                        'high': "Max_iter alto (>500) = maior precis√£o, mais lento"
                    }
                }
            },
            'svm': {
                'kernel': {
                    'default': 'rbf',
                    'options': ['rbf', 'linear', 'poly'],
                    'explanation': "Tipo de transforma√ß√£o para separar as categorias",
                    'impact': {
                        'rbf': "RBF = captura padr√µes curvos (recomendado para estoque)",
                        'linear': "Linear = assume separa√ß√£o linear simples",
                        'poly': "Polynomial = padr√µes complexos, risco de overfitting"
                    }
                },
                'C': {
                    'default': 1.0,
                    'range': (0.1, 10.0),
                    'step': 0.1,
                    'explanation': "Controle do equil√≠brio entre precis√£o e generaliza√ß√£o",
                    'impact': {
                        'low': "C baixo (<1.0) = generaliza√ß√£o alta, precis√£o menor",
                        'medium': "C m√©dio (1.0-3.0) = equil√≠brio ideal",
                        'high': "C alto (>3.0) = precis√£o alta, risco de overfitting"
                    }
                }
            },
            'xgboost': {
                'n_estimators': {
                    'default': 100,
                    'range': (50, 300),
                    'step': 25,
                    'explanation': "N√∫mero de √°rvores de decis√£o no modelo",
                    'impact': {
                        'low': "N_estimators baixo (<100) = modelo simples, r√°pido",
                        'medium': "N_estimators m√©dio (100-200) = boa performance",
                        'high': "N_estimators alto (>200) = modelo complexo, pode overfitting"
                    }
                },
                'learning_rate': {
                    'default': 0.1,
                    'range': (0.01, 0.3),
                    'step': 0.01,
                    'explanation': "Velocidade de aprendizado do modelo",
                    'impact': {
                        'low': "Learning_rate baixo (<0.05) = aprendizado lento e est√°vel",
                        'medium': "Learning_rate m√©dio (0.05-0.15) = equil√≠brio ideal",
                        'high': "Learning_rate alto (>0.15) = aprendizado r√°pido, inst√°vel"
                    }
                },
                'max_depth': {
                    'default': 6,
                    'range': (3, 12),
                    'step': 1,
                    'explanation': "Profundidade m√°xima das √°rvores de decis√£o",
                    'impact': {
                        'low': "Max_depth baixo (<5) = modelo simples, menos overfitting",
                        'medium': "Max_depth m√©dio (5-8) = complexidade balanceada",
                        'high': "Max_depth alto (>8) = modelo muito complexo"
                    }
                }
            }
        }
    
    def show_transparent_config_interface(self, algorithm: str) -> Dict[str, Any]:
        """
        Exibe interface transparente para configura√ß√£o de algoritmo espec√≠fico
        
        Args:
            algorithm: Nome do algoritmo ('dbscan', 'kmeans', 'svm', 'xgboost')
            
        Returns:
            Dict com par√¢metros configurados pelo usu√°rio
        """
        if algorithm not in self.algorithm_configs:
            st.error(f"Algoritmo '{algorithm}' n√£o encontrado!")
            return {}
        
        config = self.algorithm_configs[algorithm]
        user_params = {}
        
        st.markdown(f"#### üîß **{algorithm.upper()} - Configura√ß√£o Transparente**")
        
        with st.expander(f"üéõÔ∏è Ajustar Par√¢metros {algorithm.upper()}", expanded=True):
            for param_name, param_config in config.items():
                user_params[param_name] = self._render_parameter_control(
                    algorithm, param_name, param_config
                )
        
        # Mostrar impacto combinado dos par√¢metros
        self._show_combined_impact(algorithm, user_params)
        
        return user_params
    
    def _render_parameter_control(self, algorithm: str, param_name: str, 
                                param_config: Dict) -> Any:
        """
        Renderiza controle individual para um par√¢metro
        """
        st.markdown(f"**{param_name}**")
        st.info(f"üìù {param_config['explanation']}")
        
        # Diferentes tipos de controles baseados no par√¢metro
        if 'options' in param_config:
            # Par√¢metro categ√≥rico
            value = st.selectbox(
                f"Escolha {param_name}:",
                param_config['options'],
                index=param_config['options'].index(param_config['default']),
                key=f"{algorithm}_{param_name}"
            )
            
            # Mostrar impacto da escolha
            impact_key = value
            if impact_key in param_config['impact']:
                st.success(f"üìä {param_config['impact'][impact_key]}")
                
        elif param_config['default'] == 'auto':
            # Par√¢metro autom√°tico vs manual
            auto_mode = st.checkbox(
                f"Determina√ß√£o autom√°tica de {param_name}",
                value=True,
                key=f"{algorithm}_{param_name}_auto"
            )
            
            if auto_mode:
                value = 'auto'
                st.success(f"üìä {param_config['impact']['auto']}")
            else:
                value = st.slider(
                    f"Valor manual para {param_name}:",
                    min_value=param_config['range'][0],
                    max_value=param_config['range'][1],
                    value=4,  # Valor padr√£o manual
                    step=param_config['step'],
                    key=f"{algorithm}_{param_name}_manual"
                )
                st.info(f"üìä {param_config['impact']['manual']}")
                
        else:
            # Par√¢metro num√©rico
            value = st.slider(
                f"Valor para {param_name}:",
                min_value=param_config['range'][0],
                max_value=param_config['range'][1],
                value=param_config['default'],
                step=param_config['step'],
                key=f"{algorithm}_{param_name}"
            )
            
            # Determinar categoria do impacto
            range_size = param_config['range'][1] - param_config['range'][0]
            if value <= param_config['range'][0] + range_size * 0.33:
                impact_key = 'low'
            elif value <= param_config['range'][0] + range_size * 0.66:
                impact_key = 'medium'
            else:
                impact_key = 'high'
            
            if impact_key in param_config['impact']:
                # Cores diferentes para diferentes impactos
                if impact_key == 'low':
                    st.info(f"üìä {param_config['impact'][impact_key]}")
                elif impact_key == 'medium':
                    st.success(f"üìä {param_config['impact'][impact_key]}")
                else:
                    st.warning(f"üìä {param_config['impact'][impact_key]}")
        
        st.markdown("---")
        return value
    
    def _show_combined_impact(self, algorithm: str, user_params: Dict):
        """
        Mostra impacto combinado dos par√¢metros escolhidos
        """
        st.markdown("#### üìä **Impacto Combinado dos Par√¢metros**")
        
        if algorithm == 'dbscan':
            eps = user_params.get('eps', 0.3)
            min_samples = user_params.get('min_samples', 5)
            
            if eps < 0.3 and min_samples < 6:
                st.warning("‚ö†Ô∏è Configura√ß√£o RIGOROSA: Muitos outliers ser√£o detectados")
            elif eps > 0.5 and min_samples > 10:
                st.info("‚ÑπÔ∏è Configura√ß√£o TOLERANTE: Poucos outliers, grupos grandes")
            else:
                st.success("‚úÖ Configura√ß√£o EQUILIBRADA: Boa detec√ß√£o de padr√µes")
                
        elif algorithm == 'kmeans':
            n_clusters = user_params.get('n_clusters', 'auto')
            max_iter = user_params.get('max_iter', 300)
            
            if n_clusters == 'auto':
                st.success("‚úÖ Modo INTELIGENTE: Categorias baseadas em dados reais")
            else:
                st.info(f"‚ÑπÔ∏è Modo MANUAL: {n_clusters} categorias fixas")
                
        elif algorithm == 'svm':
            kernel = user_params.get('kernel', 'rbf')
            C = user_params.get('C', 1.0)
            
            if kernel == 'rbf' and 0.5 <= C <= 2.0:
                st.success("‚úÖ Configura√ß√£o RECOMENDADA para dados de estoque")
            elif C > 5.0:
                st.warning("‚ö†Ô∏è Risco de OVERFITTING: C muito alto")
            else:
                st.info("‚ÑπÔ∏è Configura√ß√£o EXPERIMENTAL: Monitore performance")
    
    def show_parameters_used_section(self, algorithm_params: Dict[str, Dict]):
        """
        Mostra se√ß√£o "Par√¢metros Utilizados" nos resultados
        conforme exigido pelo padr√£o de transpar√™ncia
        """
        st.markdown("#### üéõÔ∏è **Par√¢metros Utilizados na An√°lise**")
        
        with st.expander("Ver par√¢metros detalhados", expanded=False):
            for algorithm, params in algorithm_params.items():
                st.markdown(f"**{algorithm.upper()}:**")
                
                for param, value in params.items():
                    if param != 'reasoning':
                        st.write(f"‚Ä¢ **{param}**: {value}")
                
                # Mostrar racioc√≠nio se dispon√≠vel
                if 'reasoning' in params:
                    st.info(f"üß† **Racioc√≠nio**: {params['reasoning']}")
                
                st.markdown("---")


def exemplo_interface_transparencia():
    """
    Exemplo de como usar a interface de transpar√™ncia no Streamlit
    """
    st.title("üß† Configura√ß√£o Transparente de Algoritmos ML")
    st.markdown("Baseado em: `context-engineering/CLAUDE.md`")
    
    # Instanciar configurador
    config = ParameterTransparencyConfig()
    
    # Seletor de algoritmo
    algoritmo = st.selectbox(
        "üî¨ Escolha o algoritmo para configurar:",
        ['dbscan', 'kmeans', 'svm', 'xgboost'],
        help="Cada algoritmo tem par√¢metros espec√≠ficos com explica√ß√µes detalhadas"
    )
    
    # Interface transparente
    parametros_usuario = config.show_transparent_config_interface(algoritmo)
    
    # Bot√£o para executar an√°lise
    if st.button(f"üöÄ Executar {algoritmo.upper()} com par√¢metros configurados"):
        st.success("‚úÖ An√°lise executada com transpar√™ncia total!")
        
        # Simular se√ß√£o "Par√¢metros Utilizados"
        config.show_parameters_used_section({
            algoritmo: {
                **parametros_usuario,
                'reasoning': f"Par√¢metros otimizados para contexto de estoque"
            }
        })

if __name__ == "__main__":
    # Exemplo standalone
    print("üß† Sistema de Transpar√™ncia de Par√¢metros ML")
    print("üìã Baseado em: context-engineering/CLAUDE.md")
    print("")
    print("Este exemplo demonstra como implementar transpar√™ncia total")
    print("conforme especificado na documenta√ß√£o de engenharia contextual.")
    print("")
    print("Para usar no Streamlit:")
    print("streamlit run context-engineering/examples/parameter_transparency_config.py") 